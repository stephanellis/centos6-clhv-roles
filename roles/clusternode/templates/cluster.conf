<?xml version="1.0"?>
<cluster name="{{ cluster_name }}" config_version="{{ ccs_config_version }}">
	<cman expected_votes="{{ 1 if groups[cluster_group]|length() == 2 else groups[cluster_group]|length() }}" two_node="{{ 1 if groups[cluster_group]|length() == 2 else 0 }}" />
	<logging syslog_priority="Warning" />
	<clusternodes>
{% for host in groups[cluster_group] %}
		<clusternode name="{{ host }}.bcn" nodeid="{{ hostvars[host]['node_id'] }}">
			<fence>
{% if hostvars[host]['ipmi_ip'] is defined %}
				<method name="ipmi">
					<device name="ipmi_{{ host }}" action="off" />
				</method>
{% endif %}
{% if apcpdu_group is defined %}
				<method name="pdu">
{% for pdu in groups[apcpdu_group] %}
{% if hostvars[host][pdu + '_port'] is defined %}
					<device name="{{ pdu }}" port="{{ hostvars[host][pdu + '_port'] }}" action="off" />
{% endif %}
{% endfor %}
				</method>
{% endif %}
			</fence>
		</clusternode>
{% endfor %}
	</clusternodes>
	<fencedevices>
{% for host in groups[cluster_group] %}
{% if hostvars[host]['ipmi_ip'] is defined %}
		<fencedevice name="ipmi_{{ host }}" agent="fence_ipmilan" ipaddr="{{ hostvars[host]['ipmi_ip'] }}" login="{{ hostvars[host]['ipmi_user'] }}" passwd="{{ hostvars[host]['ipmi_pass'] }}" />
{% endif %}
{% endfor %}{% if apcpdu_group is defined %}{% for pdu in groups[apcpdu_group] %}
		<fencedevice agent="fence_apc_snmp" ipaddr="{{ hostvars[pdu]['ip'] }}" name="{{ pdu }}" />
{% endfor %}{% endif %}
	</fencedevices>
	<fence_daemon post_join_delay="30" />
	<totem rrp_mode="none" secauth="off"/>
	<rm log_level="{{ rm_log_level }}">
		<resources>
			<script file="/etc/init.d/libvirtd" name="libvirtd"/>
		</resources>
		<failoverdomains>
{% for host in groups[cluster_group] %}
			<failoverdomain name="only_{{ host }}" nofailback="1" ordered="0" restricted="1">
				<failoverdomainnode name="{{ host }}.bcn"/>
			</failoverdomain>
{% endfor %}
{% for fd in vmfds %}
			<failoverdomain name="{{ fd['name'] }}" nofailback="1" ordered="1" restricted="1">
{% for node in fd['nodes'] %}
{% if node in groups[cluster_group] %}
				<failoverdomainnode name="{{ node }}.bcn" priority="{{ loop.index }}" />
{% endif %}
{% endfor %}
			</failoverdomain>
{% endfor %}
		</failoverdomains>
{% for host in groups[cluster_group] %}
		<service name="libvirt_{{ host }}" autostart="1" domain="only_{{ host }}" exclusive="0" recovery="restart">
	        	<script ref="libvirtd"/>
		</service>
{% endfor %}
{% for vm in vms %}
	<vm autostart="1" domain="{{ vm['fd'] }}" exclusive="0" max_restarts="2" name="{{ vm['name'] }}" path="{{ vmdefpath }}" recovery="restart" restart_expire_time="600"/>
{% endfor %}
	</rm>
</cluster>
